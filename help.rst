CatGraphApi
=============

Interoduction
---------------
TBD

Parameters:

:op: The operation to perform. Currently, only op=list is supported.

	:op=list: generates a list of pages. See the section `List Operation`_
		for details.

:format: The format parameter determines the output format.

	:format=inline: show the result inline on the CatGraphApi page.
	:format=json: generate JSON_ output. The **callback** parameter may be set
		to generate JSONP_. See the section `JSON Format`_ for details.
		
	:format=debug: generate debug output.
	
.. _JSON: http://en.wikipedia.org/wiki/JSON
.. _JSONP: http://en.wikipedia.org/wiki/JSONP


List Operation
---------------

The list operation lists a set of wiki pages. The list is generated as follows:

First, a *base set* is generated by evaluating the contents of one or more categories and
all their subcategories. 

Next, additional *page sets* can be defined. They are generated in the same way as the
base set. Each additional page set is either *intersected* with the contents of the base set,
keeping only pages that are present in both sets. Or it is *subtracted* from the base set,
so that only pages remain in the base set that are not in the addition page set. Each
additional page set is combined in this way with the base set, which serves as an
accumulator for the result.

Finally, a series of filters is applied to the pages that remain in the *base set*.
The following filters are supported:

- by namespace
- by time of last modification
- by time of creation
- by size

URL Parameters:

:cat: the name of the base category, used to generate the base set. Multiple
	categories may be combined by listing their names separated by a pipe 
	character ("|").

:catN: (where **N** is a number between 2 and 15) the name of an additional
	category, used to reduce the base set. Multiple categories may be combined 
	by listing their names separated by a pipe character ("|"). Per default, 
	the contents of the category are intersected with the base set, keeping 
	only pages that are present in both sets. In *not* mode, the set is 
	*subtracted* from the base set,	so that only pages remain in the base
	set that are not in the addition page set. 
	
	The *not* mode can be triggered by prefixing the category name (resp.
	the category list) with ``<not>``, or by setting the corresponding
	**catN_not** parameter to ``not``.
	
	Using the *catN* parameter to specify and combine several page sets
	allows for powerful set operations. Say you are interested in pages that
	are in the categories *Writer* and also in either *New York* or 
	*Los Angeles* (or any of their subcategories), but are not in the
	category *American people‎*, you can express this as follows::
	
		cat=Writer&cat2=New_York|Los_Angeles&cat3=<not>American_people‎
		
	or alternatively::

		cat=Writer&cat2=New_York|Los_Angeles&cat3=American_people‎&cat3_not=not
		
	Using the *cat* parameters, the page set is thus defined using set
	operations in `conjunctive normal form`_. The above may be understood as::
	
		Writer AND ( New_York OR Los_Angeles ) AND ( NOT American_people )

:namespace: a pipe-separated list of numeric namespace ids. Only pages in
	the given namespaces will be returned.

:template: the name of a template (or a pipe-separated list of template names).
	Per default ("with template" mode), only pages that contain the given 
	template(s) remain in the result. Hoever, if *not* mode is activated 
	("without template"), only pages not containing the given template(s)
	remain in the page set.
	
	The *not* mode can be triggered by prefixing the template name (resp.
	the template list) with ``<not>``, or by setting the **template_not**
	parameter to ``not``.
	
:templateN: (where **N** is a number between 2 and 15) additional templates
	to use for filtering. These parameters are handled just like the
	*template* parameter, including the respective **templateN_not** parameters.
	
	Filtering by multiple sets of templates allows for powerful set
	operations. Say you are interested in pages containing the templates 
	*Featured* or *Good*, but not the templates *Persondata* or *Taxobox*, 
	you can express this as follows::
	
		template=Featured|Good&template2=<not>Persondata|Taxobox
		
	or, alternatively::

		template=Featured|Good&template2=Persondata|Taxobox&template2_not=not
		
	Using the *template* parameters, the page set is thus refined using set
	operations in `conjunctive normal form`_. The above may be understood as::
	
		( Featured OR Good ) AND ( NOT ( Persondata OR Taxobox ) ) 
		
	Note that in *not* mode, specifying several templates in one page set
	is equivalent to specifying multiple page sets. The above can thus also
	be achived by::
	
		template=Featured|Good&template2=<not>Persondata&template3=<not>Taxobox
		
	which represents::
	
		( Featured OR Good ) AND ( NOT Persondata ) AND ( NOT Taxobox )
		
	This does not apply in the default ("with template") mode. 

:since: includes only pages that have been modified since the given date.
	
	The date is given as `YYYY-MM-DD HH:MM:SS`, meaning year, month
	and day followed by hour (24 hour base), minutes and seconds. The
	seconds part or the entire time part may be omitted, leaving only
	the date. The separators (dash "-", space " " and colon ":") are
	optional, but they must either be all present or all omitted. Examples:
		
	- 2011-12-20 15:00:00: 3pm on December 20, 2011.
	- 2011-12-20 15:00: also 3pm on December 20, 2011.
	- 201112201500: also 3pm on December 20, 2011.
	- 2011-12-20 15: *invalid!*
	- 2011-12-20: midnight before December 20, 2011.
	- 20111220: also midnight before December 20, 2011.
	- 20111220 15:00: *invalid!*
	
	The date may also be given *relative* to the current time, using a
	number followed by *d*, *h* or *m*, signifying a number of days,
	hours or minutes respectivley. So, *2d* means "two days ago" and
	*5m* means "five minutes ago". 
	
	Note that relative times are subject to clock skew between the wiki
	server and the server running the CatGraphApi.

:older: include only pages created before the given date. The date format 
	is the same as for the *since* parameter.

:newer: include only pages created after the given date. The date format 
	is the same as for the *since* parameter.

:larger: include only pages larger than the given size. The suffixes *k*
	and *m* may be used to provide the size in kilobyte or megabyte,
	respectively.

:smaller: include only pages smaller than the given size. The suffixes *k*
	and *m* may be used to provide the size in kilobyte or megabyte,
	respectively.

.. _`conjunctive normal form`: http://en.wikipedia.org/wiki/Conjunctive_normal_form

JSON Format
-------------

The JSON output has the following form::

	{
		"log": [
			{"categories": ["American biologists"], "step_time": 0.028958}
	, 		{"list": "subcategories", "category": "American biologists", "depth": 100, "items": 32, "step_time": 0.695728}
	, 		{"expand": "categories", "ns": "", "items": 2691, "step_time": 0.760318}
	, 		{"base": "category", "category": "American biologists", "items": 2691}
	, 		{"categories": ["Nobel_laureates"], "step_time": 0.024145}
	, 		{"list": "subcategories", "category": "Nobel_laureates", "depth": 100, "items": 93, "step_time": 0.697264}
	, 		{"expand": "categories", "ns": "", "items": 1025, "step_time": 0.727509}
	, 		{"filter": "cut", "category": "Nobel_laureates", "items": 76, "step_time": 0.071994}
	, 		{"total_time": 3.006035}
		]
	, 	"items": [
			{"id": 17095, "ns": 0, "title": "Kary_Mullis"}
	, 		{"id": 17367, "ns": 0, "title": "Konrad_Emil_Bloch"}
	, 		{"id": 31522, "ns": 0, "title": "Thomas_Hunt_Morgan"}
	, 		{"id": 34051, "ns": 0, "title": "Walter_Gilbert"}
	, 		{"id": 37342, "ns": 0, "title": "Linus_Pauling"}
	, 		{"id": 51775, "ns": 0, "title": "Sidney_Altman"}
	, 		{"id": 55188, "ns": 0, "title": "Barbara_McClintock"}
		]
	, 	"status": {"status": "ok", "items": 76}
	}   

There are three sections in the result:

:log: This section contains information about query processing and may be used for optimazation
    and debugging. It contains a list of activities, along with timing information for each step.
  
:items: This section contains the actual result of the query, as a list of items (usually pages).
    For a query that returns wiki pages, the items have the properties *id* (the page_id), *ns* 
    (the page_namespace) and *title* (the page_title, in database form, without namespace prefix).
  
:status: This is a single object representing the outcome of the query. If the *status* field is "ok"
    the query was successful. Otherwise, the status will be "error".
    
Below is an example of a failed query::

	{
		"log": [
			{"categories": ["American biologists"], "step_time": 0.021259}
	, 		{"list": "subcategories", "category": "American biologists", "depth": 100, "items": 32, "step_time": 0.692975}
	, 		{"expand": "categories", "ns": "", "items": 2691, "step_time": 0.778038}
	, 		{"base": "category", "category": "American biologists", "items": 2691}
	, 		{"categories": ["Nobel_winner"], "step_time": 0.009091}
		]
	, 	"status": {"status": "error", "type": "gpClientException", "message": "Page not found in namespace 14: Nobel_winner"}
	}

Here, the status reports the type of the error that was encountered, and an error message.
